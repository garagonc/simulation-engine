# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.electric_vehicle import ElectricVehicle  # noqa: F401,E501
from swagger_server import util


class ChargingStation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type_application: str='residential', bus: str=None, max_charging_power_k_w: float=None, hosted_ev: List[ElectricVehicle]=None):  # noqa: E501
        """ChargingStation - a model defined in Swagger

        :param id: The id of this ChargingStation.  # noqa: E501
        :type id: str
        :param type_application: The type_application of this ChargingStation.  # noqa: E501
        :type type_application: str
        :param bus: The bus of this ChargingStation.  # noqa: E501
        :type bus: str
        :param max_charging_power_k_w: The max_charging_power_k_w of this ChargingStation.  # noqa: E501
        :type max_charging_power_k_w: float
        :param hosted_ev: The hosted_ev of this ChargingStation.  # noqa: E501
        :type hosted_ev: List[ElectricVehicle]
        """
        self.swagger_types = {
            'id': str,
            'type_application': str,
            'bus': str,
            'max_charging_power_k_w': float,
            'hosted_ev': List[ElectricVehicle]
        }

        self.attribute_map = {
            'id': 'id',
            'type_application': 'type_application',
            'bus': 'bus',
            'max_charging_power_k_w': 'max_charging_power_kW',
            'hosted_ev': 'hosted_ev'
        }

        self._id = id
        self._type_application = type_application
        self._bus = bus
        self._max_charging_power_k_w = max_charging_power_k_w
        self._hosted_ev = hosted_ev

    @classmethod
    def from_dict(cls, dikt) -> 'ChargingStation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChargingStation of this ChargingStation.  # noqa: E501
        :rtype: ChargingStation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ChargingStation.


        :return: The id of this ChargingStation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ChargingStation.


        :param id: The id of this ChargingStation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type_application(self) -> str:
        """Gets the type_application of this ChargingStation.

        residential or commercial  # noqa: E501

        :return: The type_application of this ChargingStation.
        :rtype: str
        """
        return self._type_application

    @type_application.setter
    def type_application(self, type_application: str):
        """Sets the type_application of this ChargingStation.

        residential or commercial  # noqa: E501

        :param type_application: The type_application of this ChargingStation.
        :type type_application: str
        """
        if type_application is None:
            raise ValueError("Invalid value for `type_application`, must not be `None`")  # noqa: E501

        self._type_application = type_application

    @property
    def bus(self) -> str:
        """Gets the bus of this ChargingStation.

        ID for the connected bus  # noqa: E501

        :return: The bus of this ChargingStation.
        :rtype: str
        """
        return self._bus

    @bus.setter
    def bus(self, bus: str):
        """Sets the bus of this ChargingStation.

        ID for the connected bus  # noqa: E501

        :param bus: The bus of this ChargingStation.
        :type bus: str
        """
        if bus is None:
            raise ValueError("Invalid value for `bus`, must not be `None`")  # noqa: E501

        self._bus = bus

    @property
    def max_charging_power_k_w(self) -> float:
        """Gets the max_charging_power_k_w of this ChargingStation.


        :return: The max_charging_power_k_w of this ChargingStation.
        :rtype: float
        """
        return self._max_charging_power_k_w

    @max_charging_power_k_w.setter
    def max_charging_power_k_w(self, max_charging_power_k_w: float):
        """Sets the max_charging_power_k_w of this ChargingStation.


        :param max_charging_power_k_w: The max_charging_power_k_w of this ChargingStation.
        :type max_charging_power_k_w: float
        """

        self._max_charging_power_k_w = max_charging_power_k_w

    @property
    def hosted_ev(self) -> List[ElectricVehicle]:
        """Gets the hosted_ev of this ChargingStation.


        :return: The hosted_ev of this ChargingStation.
        :rtype: List[ElectricVehicle]
        """
        return self._hosted_ev

    @hosted_ev.setter
    def hosted_ev(self, hosted_ev: List[ElectricVehicle]):
        """Sets the hosted_ev of this ChargingStation.


        :param hosted_ev: The hosted_ev of this ChargingStation.
        :type hosted_ev: List[ElectricVehicle]
        """

        self._hosted_ev = hosted_ev
