# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.transformer_windings import TransformerWindings  # noqa: F401,E501
from swagger_server import util


class Transformer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, radials: List[str]=None, phases: int=None, windings: TransformerWindings=None, xhl: float=None, xlt: float=None, xht: float=None, percent_load_loss: float=None, bank: str=None, tap_level: float=None, base_frequency: float=None):  # noqa: E501
        """Transformer - a model defined in Swagger

        :param id: The id of this Transformer.  # noqa: E501
        :type id: str
        :param radials: The radials of this Transformer.  # noqa: E501
        :type radials: List[str]
        :param phases: The phases of this Transformer.  # noqa: E501
        :type phases: int
        :param windings: The windings of this Transformer.  # noqa: E501
        :type windings: TransformerWindings
        :param xhl: The xhl of this Transformer.  # noqa: E501
        :type xhl: float
        :param xlt: The xlt of this Transformer.  # noqa: E501
        :type xlt: float
        :param xht: The xht of this Transformer.  # noqa: E501
        :type xht: float
        :param percent_load_loss: The percent_load_loss of this Transformer.  # noqa: E501
        :type percent_load_loss: float
        :param bank: The bank of this Transformer.  # noqa: E501
        :type bank: str
        :param tap_level: The tap_level of this Transformer.  # noqa: E501
        :type tap_level: float
        :param base_frequency: The base_frequency of this Transformer.  # noqa: E501
        :type base_frequency: float
        """
        self.swagger_types = {
            'id': str,
            'radials': List[str],
            'phases': int,
            'windings': TransformerWindings,
            'xhl': float,
            'xlt': float,
            'xht': float,
            'percent_load_loss': float,
            'bank': str,
            'tap_level': float,
            'base_frequency': float
        }

        self.attribute_map = {
            'id': 'id',
            'radials': 'radials',
            'phases': 'phases',
            'windings': 'windings',
            'xhl': 'xhl',
            'xlt': 'xlt',
            'xht': 'xht',
            'percent_load_loss': 'percent_load_loss',
            'bank': 'bank',
            'tap_level': 'tapLevel',
            'base_frequency': 'base_frequency'
        }

        self._id = id
        self._radials = radials
        self._phases = phases
        self._windings = windings
        self._xhl = xhl
        self._xlt = xlt
        self._xht = xht
        self._percent_load_loss = percent_load_loss
        self._bank = bank
        self._tap_level = tap_level
        self._base_frequency = base_frequency

    @classmethod
    def from_dict(cls, dikt) -> 'Transformer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transformer of this Transformer.  # noqa: E501
        :rtype: Transformer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Transformer.


        :return: The id of this Transformer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Transformer.


        :param id: The id of this Transformer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def radials(self) -> List[str]:
        """Gets the radials of this Transformer.


        :return: The radials of this Transformer.
        :rtype: List[str]
        """
        return self._radials

    @radials.setter
    def radials(self, radials: List[str]):
        """Sets the radials of this Transformer.


        :param radials: The radials of this Transformer.
        :type radials: List[str]
        """

        self._radials = radials

    @property
    def phases(self) -> int:
        """Gets the phases of this Transformer.

        Number of Phases  # noqa: E501

        :return: The phases of this Transformer.
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases: int):
        """Sets the phases of this Transformer.

        Number of Phases  # noqa: E501

        :param phases: The phases of this Transformer.
        :type phases: int
        """
        if phases is None:
            raise ValueError("Invalid value for `phases`, must not be `None`")  # noqa: E501

        self._phases = phases

    @property
    def windings(self) -> TransformerWindings:
        """Gets the windings of this Transformer.


        :return: The windings of this Transformer.
        :rtype: TransformerWindings
        """
        return self._windings

    @windings.setter
    def windings(self, windings: TransformerWindings):
        """Sets the windings of this Transformer.


        :param windings: The windings of this Transformer.
        :type windings: TransformerWindings
        """
        if windings is None:
            raise ValueError("Invalid value for `windings`, must not be `None`")  # noqa: E501

        self._windings = windings

    @property
    def xhl(self) -> float:
        """Gets the xhl of this Transformer.

        Percent reactance high-to-low (winding 1 to winding 2)  # noqa: E501

        :return: The xhl of this Transformer.
        :rtype: float
        """
        return self._xhl

    @xhl.setter
    def xhl(self, xhl: float):
        """Sets the xhl of this Transformer.

        Percent reactance high-to-low (winding 1 to winding 2)  # noqa: E501

        :param xhl: The xhl of this Transformer.
        :type xhl: float
        """
        if xhl is None:
            raise ValueError("Invalid value for `xhl`, must not be `None`")  # noqa: E501

        self._xhl = xhl

    @property
    def xlt(self) -> float:
        """Gets the xlt of this Transformer.

        Percent reactance high-to-low (winding 2 to winding 3)  # noqa: E501

        :return: The xlt of this Transformer.
        :rtype: float
        """
        return self._xlt

    @xlt.setter
    def xlt(self, xlt: float):
        """Sets the xlt of this Transformer.

        Percent reactance high-to-low (winding 2 to winding 3)  # noqa: E501

        :param xlt: The xlt of this Transformer.
        :type xlt: float
        """

        self._xlt = xlt

    @property
    def xht(self) -> float:
        """Gets the xht of this Transformer.

        Percent reactance high-to-low (winding 1 to winding 3)  # noqa: E501

        :return: The xht of this Transformer.
        :rtype: float
        """
        return self._xht

    @xht.setter
    def xht(self, xht: float):
        """Sets the xht of this Transformer.

        Percent reactance high-to-low (winding 1 to winding 3)  # noqa: E501

        :param xht: The xht of this Transformer.
        :type xht: float
        """

        self._xht = xht

    @property
    def percent_load_loss(self) -> float:
        """Gets the percent_load_loss of this Transformer.

        Percent reactance high-to-low (winding 1 to winding 3)  # noqa: E501

        :return: The percent_load_loss of this Transformer.
        :rtype: float
        """
        return self._percent_load_loss

    @percent_load_loss.setter
    def percent_load_loss(self, percent_load_loss: float):
        """Sets the percent_load_loss of this Transformer.

        Percent reactance high-to-low (winding 1 to winding 3)  # noqa: E501

        :param percent_load_loss: The percent_load_loss of this Transformer.
        :type percent_load_loss: float
        """
        if percent_load_loss is not None and percent_load_loss > 1:  # noqa: E501
            raise ValueError("Invalid value for `percent_load_loss`, must be a value less than or equal to `1`")  # noqa: E501
        if percent_load_loss is not None and percent_load_loss < 0:  # noqa: E501
            raise ValueError("Invalid value for `percent_load_loss`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent_load_loss = percent_load_loss

    @property
    def bank(self) -> str:
        """Gets the bank of this Transformer.

        Name of the bank this transformer is part of  # noqa: E501

        :return: The bank of this Transformer.
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank: str):
        """Sets the bank of this Transformer.

        Name of the bank this transformer is part of  # noqa: E501

        :param bank: The bank of this Transformer.
        :type bank: str
        """

        self._bank = bank

    @property
    def tap_level(self) -> float:
        """Gets the tap_level of this Transformer.


        :return: The tap_level of this Transformer.
        :rtype: float
        """
        return self._tap_level

    @tap_level.setter
    def tap_level(self, tap_level: float):
        """Sets the tap_level of this Transformer.


        :param tap_level: The tap_level of this Transformer.
        :type tap_level: float
        """

        self._tap_level = tap_level

    @property
    def base_frequency(self) -> float:
        """Gets the base_frequency of this Transformer.


        :return: The base_frequency of this Transformer.
        :rtype: float
        """
        return self._base_frequency

    @base_frequency.setter
    def base_frequency(self, base_frequency: float):
        """Sets the base_frequency of this Transformer.


        :param base_frequency: The base_frequency of this Transformer.
        :type base_frequency: float
        """

        self._base_frequency = base_frequency
