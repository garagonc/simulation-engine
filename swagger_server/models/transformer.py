# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Transformer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, latitude: int=None, longitude: int=None, voltage_primary: float=None, voltage_secondary: float=None, voltage_base_primary: float=None, voltage_base_secondary: float=None, power_primary: int=None, power_secondary: int=None, connection: str=None, node_hv: str=None, node_lv: str=None, no_load_loss: float=None, req: float=None, xeq: float=None, ceq_total: float=None, monitor: int=None, control: int=None, tap_level: float=None, voltageunit: str=None, frequency: int=None, unitpower: str=None):  # noqa: E501
        """Transformer - a model defined in Swagger

        :param id: The id of this Transformer.  # noqa: E501
        :type id: str
        :param latitude: The latitude of this Transformer.  # noqa: E501
        :type latitude: int
        :param longitude: The longitude of this Transformer.  # noqa: E501
        :type longitude: int
        :param voltage_primary: The voltage_primary of this Transformer.  # noqa: E501
        :type voltage_primary: float
        :param voltage_secondary: The voltage_secondary of this Transformer.  # noqa: E501
        :type voltage_secondary: float
        :param voltage_base_primary: The voltage_base_primary of this Transformer.  # noqa: E501
        :type voltage_base_primary: float
        :param voltage_base_secondary: The voltage_base_secondary of this Transformer.  # noqa: E501
        :type voltage_base_secondary: float
        :param power_primary: The power_primary of this Transformer.  # noqa: E501
        :type power_primary: int
        :param power_secondary: The power_secondary of this Transformer.  # noqa: E501
        :type power_secondary: int
        :param connection: The connection of this Transformer.  # noqa: E501
        :type connection: str
        :param node_hv: The node_hv of this Transformer.  # noqa: E501
        :type node_hv: str
        :param node_lv: The node_lv of this Transformer.  # noqa: E501
        :type node_lv: str
        :param no_load_loss: The no_load_loss of this Transformer.  # noqa: E501
        :type no_load_loss: float
        :param req: The req of this Transformer.  # noqa: E501
        :type req: float
        :param xeq: The xeq of this Transformer.  # noqa: E501
        :type xeq: float
        :param ceq_total: The ceq_total of this Transformer.  # noqa: E501
        :type ceq_total: float
        :param monitor: The monitor of this Transformer.  # noqa: E501
        :type monitor: int
        :param control: The control of this Transformer.  # noqa: E501
        :type control: int
        :param tap_level: The tap_level of this Transformer.  # noqa: E501
        :type tap_level: float
        :param voltageunit: The voltageunit of this Transformer.  # noqa: E501
        :type voltageunit: str
        :param frequency: The frequency of this Transformer.  # noqa: E501
        :type frequency: int
        :param unitpower: The unitpower of this Transformer.  # noqa: E501
        :type unitpower: str
        """
        self.swagger_types = {
            'id': str,
            'latitude': int,
            'longitude': int,
            'voltage_primary': float,
            'voltage_secondary': float,
            'voltage_base_primary': float,
            'voltage_base_secondary': float,
            'power_primary': int,
            'power_secondary': int,
            'connection': str,
            'node_hv': str,
            'node_lv': str,
            'no_load_loss': float,
            'req': float,
            'xeq': float,
            'ceq_total': float,
            'monitor': int,
            'control': int,
            'tap_level': float,
            'voltageunit': str,
            'frequency': int,
            'unitpower': str
        }

        self.attribute_map = {
            'id': 'id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'voltage_primary': 'voltagePrimary',
            'voltage_secondary': 'voltageSecondary',
            'voltage_base_primary': 'voltageBasePrimary',
            'voltage_base_secondary': 'voltageBaseSecondary',
            'power_primary': 'powerPrimary',
            'power_secondary': 'powerSecondary',
            'connection': 'connection',
            'node_hv': 'nodeHV',
            'node_lv': 'nodeLV',
            'no_load_loss': 'noLoadLoss',
            'req': 'Req',
            'xeq': 'Xeq',
            'ceq_total': 'CeqTotal',
            'monitor': 'monitor',
            'control': 'control',
            'tap_level': 'tapLevel',
            'voltageunit': 'voltageunit',
            'frequency': 'frequency',
            'unitpower': 'unitpower'
        }

        self._id = id
        self._latitude = latitude
        self._longitude = longitude
        self._voltage_primary = voltage_primary
        self._voltage_secondary = voltage_secondary
        self._voltage_base_primary = voltage_base_primary
        self._voltage_base_secondary = voltage_base_secondary
        self._power_primary = power_primary
        self._power_secondary = power_secondary
        self._connection = connection
        self._node_hv = node_hv
        self._node_lv = node_lv
        self._no_load_loss = no_load_loss
        self._req = req
        self._xeq = xeq
        self._ceq_total = ceq_total
        self._monitor = monitor
        self._control = control
        self._tap_level = tap_level
        self._voltageunit = voltageunit
        self._frequency = frequency
        self._unitpower = unitpower

    @classmethod
    def from_dict(cls, dikt) -> 'Transformer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transformer of this Transformer.  # noqa: E501
        :rtype: Transformer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Transformer.


        :return: The id of this Transformer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Transformer.


        :param id: The id of this Transformer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def latitude(self) -> int:
        """Gets the latitude of this Transformer.


        :return: The latitude of this Transformer.
        :rtype: int
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: int):
        """Sets the latitude of this Transformer.


        :param latitude: The latitude of this Transformer.
        :type latitude: int
        """

        self._latitude = latitude

    @property
    def longitude(self) -> int:
        """Gets the longitude of this Transformer.


        :return: The longitude of this Transformer.
        :rtype: int
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: int):
        """Sets the longitude of this Transformer.


        :param longitude: The longitude of this Transformer.
        :type longitude: int
        """

        self._longitude = longitude

    @property
    def voltage_primary(self) -> float:
        """Gets the voltage_primary of this Transformer.


        :return: The voltage_primary of this Transformer.
        :rtype: float
        """
        return self._voltage_primary

    @voltage_primary.setter
    def voltage_primary(self, voltage_primary: float):
        """Sets the voltage_primary of this Transformer.


        :param voltage_primary: The voltage_primary of this Transformer.
        :type voltage_primary: float
        """

        self._voltage_primary = voltage_primary

    @property
    def voltage_secondary(self) -> float:
        """Gets the voltage_secondary of this Transformer.


        :return: The voltage_secondary of this Transformer.
        :rtype: float
        """
        return self._voltage_secondary

    @voltage_secondary.setter
    def voltage_secondary(self, voltage_secondary: float):
        """Sets the voltage_secondary of this Transformer.


        :param voltage_secondary: The voltage_secondary of this Transformer.
        :type voltage_secondary: float
        """

        self._voltage_secondary = voltage_secondary

    @property
    def voltage_base_primary(self) -> float:
        """Gets the voltage_base_primary of this Transformer.


        :return: The voltage_base_primary of this Transformer.
        :rtype: float
        """
        return self._voltage_base_primary

    @voltage_base_primary.setter
    def voltage_base_primary(self, voltage_base_primary: float):
        """Sets the voltage_base_primary of this Transformer.


        :param voltage_base_primary: The voltage_base_primary of this Transformer.
        :type voltage_base_primary: float
        """

        self._voltage_base_primary = voltage_base_primary

    @property
    def voltage_base_secondary(self) -> float:
        """Gets the voltage_base_secondary of this Transformer.


        :return: The voltage_base_secondary of this Transformer.
        :rtype: float
        """
        return self._voltage_base_secondary

    @voltage_base_secondary.setter
    def voltage_base_secondary(self, voltage_base_secondary: float):
        """Sets the voltage_base_secondary of this Transformer.


        :param voltage_base_secondary: The voltage_base_secondary of this Transformer.
        :type voltage_base_secondary: float
        """

        self._voltage_base_secondary = voltage_base_secondary

    @property
    def power_primary(self) -> int:
        """Gets the power_primary of this Transformer.


        :return: The power_primary of this Transformer.
        :rtype: int
        """
        return self._power_primary

    @power_primary.setter
    def power_primary(self, power_primary: int):
        """Sets the power_primary of this Transformer.


        :param power_primary: The power_primary of this Transformer.
        :type power_primary: int
        """

        self._power_primary = power_primary

    @property
    def power_secondary(self) -> int:
        """Gets the power_secondary of this Transformer.


        :return: The power_secondary of this Transformer.
        :rtype: int
        """
        return self._power_secondary

    @power_secondary.setter
    def power_secondary(self, power_secondary: int):
        """Sets the power_secondary of this Transformer.


        :param power_secondary: The power_secondary of this Transformer.
        :type power_secondary: int
        """

        self._power_secondary = power_secondary

    @property
    def connection(self) -> str:
        """Gets the connection of this Transformer.


        :return: The connection of this Transformer.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection: str):
        """Sets the connection of this Transformer.


        :param connection: The connection of this Transformer.
        :type connection: str
        """

        self._connection = connection

    @property
    def node_hv(self) -> str:
        """Gets the node_hv of this Transformer.


        :return: The node_hv of this Transformer.
        :rtype: str
        """
        return self._node_hv

    @node_hv.setter
    def node_hv(self, node_hv: str):
        """Sets the node_hv of this Transformer.


        :param node_hv: The node_hv of this Transformer.
        :type node_hv: str
        """

        self._node_hv = node_hv

    @property
    def node_lv(self) -> str:
        """Gets the node_lv of this Transformer.


        :return: The node_lv of this Transformer.
        :rtype: str
        """
        return self._node_lv

    @node_lv.setter
    def node_lv(self, node_lv: str):
        """Sets the node_lv of this Transformer.


        :param node_lv: The node_lv of this Transformer.
        :type node_lv: str
        """

        self._node_lv = node_lv

    @property
    def no_load_loss(self) -> float:
        """Gets the no_load_loss of this Transformer.


        :return: The no_load_loss of this Transformer.
        :rtype: float
        """
        return self._no_load_loss

    @no_load_loss.setter
    def no_load_loss(self, no_load_loss: float):
        """Sets the no_load_loss of this Transformer.


        :param no_load_loss: The no_load_loss of this Transformer.
        :type no_load_loss: float
        """

        self._no_load_loss = no_load_loss

    @property
    def req(self) -> float:
        """Gets the req of this Transformer.


        :return: The req of this Transformer.
        :rtype: float
        """
        return self._req

    @req.setter
    def req(self, req: float):
        """Sets the req of this Transformer.


        :param req: The req of this Transformer.
        :type req: float
        """

        self._req = req

    @property
    def xeq(self) -> float:
        """Gets the xeq of this Transformer.


        :return: The xeq of this Transformer.
        :rtype: float
        """
        return self._xeq

    @xeq.setter
    def xeq(self, xeq: float):
        """Sets the xeq of this Transformer.


        :param xeq: The xeq of this Transformer.
        :type xeq: float
        """

        self._xeq = xeq

    @property
    def ceq_total(self) -> float:
        """Gets the ceq_total of this Transformer.


        :return: The ceq_total of this Transformer.
        :rtype: float
        """
        return self._ceq_total

    @ceq_total.setter
    def ceq_total(self, ceq_total: float):
        """Sets the ceq_total of this Transformer.


        :param ceq_total: The ceq_total of this Transformer.
        :type ceq_total: float
        """

        self._ceq_total = ceq_total

    @property
    def monitor(self) -> int:
        """Gets the monitor of this Transformer.


        :return: The monitor of this Transformer.
        :rtype: int
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor: int):
        """Sets the monitor of this Transformer.


        :param monitor: The monitor of this Transformer.
        :type monitor: int
        """

        self._monitor = monitor

    @property
    def control(self) -> int:
        """Gets the control of this Transformer.


        :return: The control of this Transformer.
        :rtype: int
        """
        return self._control

    @control.setter
    def control(self, control: int):
        """Sets the control of this Transformer.


        :param control: The control of this Transformer.
        :type control: int
        """

        self._control = control

    @property
    def tap_level(self) -> float:
        """Gets the tap_level of this Transformer.


        :return: The tap_level of this Transformer.
        :rtype: float
        """
        return self._tap_level

    @tap_level.setter
    def tap_level(self, tap_level: float):
        """Sets the tap_level of this Transformer.


        :param tap_level: The tap_level of this Transformer.
        :type tap_level: float
        """

        self._tap_level = tap_level

    @property
    def voltageunit(self) -> str:
        """Gets the voltageunit of this Transformer.


        :return: The voltageunit of this Transformer.
        :rtype: str
        """
        return self._voltageunit

    @voltageunit.setter
    def voltageunit(self, voltageunit: str):
        """Sets the voltageunit of this Transformer.


        :param voltageunit: The voltageunit of this Transformer.
        :type voltageunit: str
        """

        self._voltageunit = voltageunit

    @property
    def frequency(self) -> int:
        """Gets the frequency of this Transformer.


        :return: The frequency of this Transformer.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this Transformer.


        :param frequency: The frequency of this Transformer.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def unitpower(self) -> str:
        """Gets the unitpower of this Transformer.


        :return: The unitpower of this Transformer.
        :rtype: str
        """
        return self._unitpower

    @unitpower.setter
    def unitpower(self, unitpower: str):
        """Sets the unitpower of this Transformer.


        :param unitpower: The unitpower of this Transformer.
        :type unitpower: str
        """

        self._unitpower = unitpower
