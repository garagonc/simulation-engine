# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.phases import Phases  # noqa: F401,E501
from swagger_server import util


class GridDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, base_k_v: float=None, per_unit: float=None, phases: Phases=None, bus: str=None, angle: int=None, mv_asc3: float=None, mv_asc1: float=None):  # noqa: E501
        """GridDefinition - a model defined in Swagger

        :param id: The id of this GridDefinition.  # noqa: E501
        :type id: str
        :param base_k_v: The base_k_v of this GridDefinition.  # noqa: E501
        :type base_k_v: float
        :param per_unit: The per_unit of this GridDefinition.  # noqa: E501
        :type per_unit: float
        :param phases: The phases of this GridDefinition.  # noqa: E501
        :type phases: Phases
        :param bus: The bus of this GridDefinition.  # noqa: E501
        :type bus: str
        :param angle: The angle of this GridDefinition.  # noqa: E501
        :type angle: int
        :param mv_asc3: The mv_asc3 of this GridDefinition.  # noqa: E501
        :type mv_asc3: float
        :param mv_asc1: The mv_asc1 of this GridDefinition.  # noqa: E501
        :type mv_asc1: float
        """
        self.swagger_types = {
            'id': str,
            'base_k_v': float,
            'per_unit': float,
            'phases': Phases,
            'bus': str,
            'angle': int,
            'mv_asc3': float,
            'mv_asc1': float
        }

        self.attribute_map = {
            'id': 'id',
            'base_k_v': 'base_kV',
            'per_unit': 'per_unit',
            'phases': 'phases',
            'bus': 'bus',
            'angle': 'angle',
            'mv_asc3': 'MVAsc3',
            'mv_asc1': 'MVAsc1'
        }

        self._id = id
        self._base_k_v = base_k_v
        self._per_unit = per_unit
        self._phases = phases
        self._bus = bus
        self._angle = angle
        self._mv_asc3 = mv_asc3
        self._mv_asc1 = mv_asc1

    @classmethod
    def from_dict(cls, dikt) -> 'GridDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Grid_Definition of this GridDefinition.  # noqa: E501
        :rtype: GridDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this GridDefinition.


        :return: The id of this GridDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this GridDefinition.


        :param id: The id of this GridDefinition.
        :type id: str
        """

        self._id = id

    @property
    def base_k_v(self) -> float:
        """Gets the base_k_v of this GridDefinition.


        :return: The base_k_v of this GridDefinition.
        :rtype: float
        """
        return self._base_k_v

    @base_k_v.setter
    def base_k_v(self, base_k_v: float):
        """Sets the base_k_v of this GridDefinition.


        :param base_k_v: The base_k_v of this GridDefinition.
        :type base_k_v: float
        """

        self._base_k_v = base_k_v

    @property
    def per_unit(self) -> float:
        """Gets the per_unit of this GridDefinition.


        :return: The per_unit of this GridDefinition.
        :rtype: float
        """
        return self._per_unit

    @per_unit.setter
    def per_unit(self, per_unit: float):
        """Sets the per_unit of this GridDefinition.


        :param per_unit: The per_unit of this GridDefinition.
        :type per_unit: float
        """

        self._per_unit = per_unit

    @property
    def phases(self) -> Phases:
        """Gets the phases of this GridDefinition.


        :return: The phases of this GridDefinition.
        :rtype: Phases
        """
        return self._phases

    @phases.setter
    def phases(self, phases: Phases):
        """Sets the phases of this GridDefinition.


        :param phases: The phases of this GridDefinition.
        :type phases: Phases
        """

        self._phases = phases

    @property
    def bus(self) -> str:
        """Gets the bus of this GridDefinition.


        :return: The bus of this GridDefinition.
        :rtype: str
        """
        return self._bus

    @bus.setter
    def bus(self, bus: str):
        """Sets the bus of this GridDefinition.


        :param bus: The bus of this GridDefinition.
        :type bus: str
        """

        self._bus = bus

    @property
    def angle(self) -> int:
        """Gets the angle of this GridDefinition.


        :return: The angle of this GridDefinition.
        :rtype: int
        """
        return self._angle

    @angle.setter
    def angle(self, angle: int):
        """Sets the angle of this GridDefinition.


        :param angle: The angle of this GridDefinition.
        :type angle: int
        """

        self._angle = angle

    @property
    def mv_asc3(self) -> float:
        """Gets the mv_asc3 of this GridDefinition.


        :return: The mv_asc3 of this GridDefinition.
        :rtype: float
        """
        return self._mv_asc3

    @mv_asc3.setter
    def mv_asc3(self, mv_asc3: float):
        """Sets the mv_asc3 of this GridDefinition.


        :param mv_asc3: The mv_asc3 of this GridDefinition.
        :type mv_asc3: float
        """

        self._mv_asc3 = mv_asc3

    @property
    def mv_asc1(self) -> float:
        """Gets the mv_asc1 of this GridDefinition.


        :return: The mv_asc1 of this GridDefinition.
        :rtype: float
        """
        return self._mv_asc1

    @mv_asc1.setter
    def mv_asc1(self, mv_asc1: float):
        """Sets the mv_asc1 of this GridDefinition.


        :param mv_asc1: The mv_asc1 of this GridDefinition.
        :type mv_asc1: float
        """

        self._mv_asc1 = mv_asc1
