# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.charging_point import ChargingPoint  # noqa: F401,E501
from swagger_server.models.coordinates import Coordinates  # noqa: F401,E501
from swagger_server.models.photovoltaic import Photovoltaic  # noqa: F401,E501
from swagger_server.models.powerline import Powerline  # noqa: F401,E501
from swagger_server.models.storage import Storage  # noqa: F401,E501
from swagger_server.models.transformer import Transformer  # noqa: F401,E501
from swagger_server import util


class Grid(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, grid_id: int=None, coordinates: Coordinates=None, transformer: Transformer=None, power_lines: List[Powerline]=None, photovoltaics: List[Photovoltaic]=None, storage_units: List[Storage]=None, charging_points: List[ChargingPoint]=None):  # noqa: E501
        """Grid - a model defined in Swagger

        :param grid_id: The grid_id of this Grid.  # noqa: E501
        :type grid_id: int
        :param coordinates: The coordinates of this Grid.  # noqa: E501
        :type coordinates: Coordinates
        :param transformer: The transformer of this Grid.  # noqa: E501
        :type transformer: Transformer
        :param power_lines: The power_lines of this Grid.  # noqa: E501
        :type power_lines: List[Powerline]
        :param photovoltaics: The photovoltaics of this Grid.  # noqa: E501
        :type photovoltaics: List[Photovoltaic]
        :param storage_units: The storage_units of this Grid.  # noqa: E501
        :type storage_units: List[Storage]
        :param charging_points: The charging_points of this Grid.  # noqa: E501
        :type charging_points: List[ChargingPoint]
        """
        self.swagger_types = {
            'grid_id': int,
            'coordinates': Coordinates,
            'transformer': Transformer,
            'power_lines': List[Powerline],
            'photovoltaics': List[Photovoltaic],
            'storage_units': List[Storage],
            'charging_points': List[ChargingPoint]
        }

        self.attribute_map = {
            'grid_id': 'gridId',
            'coordinates': 'coordinates',
            'transformer': 'transformer',
            'power_lines': 'powerLines',
            'photovoltaics': 'photovoltaics',
            'storage_units': 'storageUnits',
            'charging_points': 'chargingPoints'
        }

        self._grid_id = grid_id
        self._coordinates = coordinates
        self._transformer = transformer
        self._power_lines = power_lines
        self._photovoltaics = photovoltaics
        self._storage_units = storage_units
        self._charging_points = charging_points

    @classmethod
    def from_dict(cls, dikt) -> 'Grid':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Grid of this Grid.  # noqa: E501
        :rtype: Grid
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grid_id(self) -> int:
        """Gets the grid_id of this Grid.


        :return: The grid_id of this Grid.
        :rtype: int
        """
        return self._grid_id

    @grid_id.setter
    def grid_id(self, grid_id: int):
        """Sets the grid_id of this Grid.


        :param grid_id: The grid_id of this Grid.
        :type grid_id: int
        """

        self._grid_id = grid_id

    @property
    def coordinates(self) -> Coordinates:
        """Gets the coordinates of this Grid.


        :return: The coordinates of this Grid.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: Coordinates):
        """Sets the coordinates of this Grid.


        :param coordinates: The coordinates of this Grid.
        :type coordinates: Coordinates
        """

        self._coordinates = coordinates

    @property
    def transformer(self) -> Transformer:
        """Gets the transformer of this Grid.


        :return: The transformer of this Grid.
        :rtype: Transformer
        """
        return self._transformer

    @transformer.setter
    def transformer(self, transformer: Transformer):
        """Sets the transformer of this Grid.


        :param transformer: The transformer of this Grid.
        :type transformer: Transformer
        """

        self._transformer = transformer

    @property
    def power_lines(self) -> List[Powerline]:
        """Gets the power_lines of this Grid.


        :return: The power_lines of this Grid.
        :rtype: List[Powerline]
        """
        return self._power_lines

    @power_lines.setter
    def power_lines(self, power_lines: List[Powerline]):
        """Sets the power_lines of this Grid.


        :param power_lines: The power_lines of this Grid.
        :type power_lines: List[Powerline]
        """

        self._power_lines = power_lines

    @property
    def photovoltaics(self) -> List[Photovoltaic]:
        """Gets the photovoltaics of this Grid.


        :return: The photovoltaics of this Grid.
        :rtype: List[Photovoltaic]
        """
        return self._photovoltaics

    @photovoltaics.setter
    def photovoltaics(self, photovoltaics: List[Photovoltaic]):
        """Sets the photovoltaics of this Grid.


        :param photovoltaics: The photovoltaics of this Grid.
        :type photovoltaics: List[Photovoltaic]
        """

        self._photovoltaics = photovoltaics

    @property
    def storage_units(self) -> List[Storage]:
        """Gets the storage_units of this Grid.


        :return: The storage_units of this Grid.
        :rtype: List[Storage]
        """
        return self._storage_units

    @storage_units.setter
    def storage_units(self, storage_units: List[Storage]):
        """Sets the storage_units of this Grid.


        :param storage_units: The storage_units of this Grid.
        :type storage_units: List[Storage]
        """

        self._storage_units = storage_units

    @property
    def charging_points(self) -> List[ChargingPoint]:
        """Gets the charging_points of this Grid.


        :return: The charging_points of this Grid.
        :rtype: List[ChargingPoint]
        """
        return self._charging_points

    @charging_points.setter
    def charging_points(self, charging_points: List[ChargingPoint]):
        """Sets the charging_points of this Grid.


        :param charging_points: The charging_points of this Grid.
        :type charging_points: List[ChargingPoint]
        """

        self._charging_points = charging_points
