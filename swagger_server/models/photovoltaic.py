# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.node import Node  # noqa: F401,E501
from swagger_server import util


class Photovoltaic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, node: Node=None, inverter_efficiency: float=None, phases: int=None, voltage: float=None, voltageunit: str=None, power: float=None, powerunit: str=None, powerfactor: float=None):  # noqa: E501
        """Photovoltaic - a model defined in Swagger

        :param id: The id of this Photovoltaic.  # noqa: E501
        :type id: int
        :param node: The node of this Photovoltaic.  # noqa: E501
        :type node: Node
        :param inverter_efficiency: The inverter_efficiency of this Photovoltaic.  # noqa: E501
        :type inverter_efficiency: float
        :param phases: The phases of this Photovoltaic.  # noqa: E501
        :type phases: int
        :param voltage: The voltage of this Photovoltaic.  # noqa: E501
        :type voltage: float
        :param voltageunit: The voltageunit of this Photovoltaic.  # noqa: E501
        :type voltageunit: str
        :param power: The power of this Photovoltaic.  # noqa: E501
        :type power: float
        :param powerunit: The powerunit of this Photovoltaic.  # noqa: E501
        :type powerunit: str
        :param powerfactor: The powerfactor of this Photovoltaic.  # noqa: E501
        :type powerfactor: float
        """
        self.swagger_types = {
            'id': int,
            'node': Node,
            'inverter_efficiency': float,
            'phases': int,
            'voltage': float,
            'voltageunit': str,
            'power': float,
            'powerunit': str,
            'powerfactor': float
        }

        self.attribute_map = {
            'id': 'id',
            'node': 'node',
            'inverter_efficiency': 'inverterEfficiency',
            'phases': 'phases',
            'voltage': 'voltage',
            'voltageunit': 'voltageunit',
            'power': 'power',
            'powerunit': 'powerunit',
            'powerfactor': 'powerfactor'
        }

        self._id = id
        self._node = node
        self._inverter_efficiency = inverter_efficiency
        self._phases = phases
        self._voltage = voltage
        self._voltageunit = voltageunit
        self._power = power
        self._powerunit = powerunit
        self._powerfactor = powerfactor

    @classmethod
    def from_dict(cls, dikt) -> 'Photovoltaic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Photovoltaic of this Photovoltaic.  # noqa: E501
        :rtype: Photovoltaic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Photovoltaic.


        :return: The id of this Photovoltaic.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Photovoltaic.


        :param id: The id of this Photovoltaic.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def node(self) -> Node:
        """Gets the node of this Photovoltaic.


        :return: The node of this Photovoltaic.
        :rtype: Node
        """
        return self._node

    @node.setter
    def node(self, node: Node):
        """Sets the node of this Photovoltaic.


        :param node: The node of this Photovoltaic.
        :type node: Node
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def inverter_efficiency(self) -> float:
        """Gets the inverter_efficiency of this Photovoltaic.


        :return: The inverter_efficiency of this Photovoltaic.
        :rtype: float
        """
        return self._inverter_efficiency

    @inverter_efficiency.setter
    def inverter_efficiency(self, inverter_efficiency: float):
        """Sets the inverter_efficiency of this Photovoltaic.


        :param inverter_efficiency: The inverter_efficiency of this Photovoltaic.
        :type inverter_efficiency: float
        """

        self._inverter_efficiency = inverter_efficiency

    @property
    def phases(self) -> int:
        """Gets the phases of this Photovoltaic.


        :return: The phases of this Photovoltaic.
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases: int):
        """Sets the phases of this Photovoltaic.


        :param phases: The phases of this Photovoltaic.
        :type phases: int
        """

        self._phases = phases

    @property
    def voltage(self) -> float:
        """Gets the voltage of this Photovoltaic.


        :return: The voltage of this Photovoltaic.
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage: float):
        """Sets the voltage of this Photovoltaic.


        :param voltage: The voltage of this Photovoltaic.
        :type voltage: float
        """

        self._voltage = voltage

    @property
    def voltageunit(self) -> str:
        """Gets the voltageunit of this Photovoltaic.


        :return: The voltageunit of this Photovoltaic.
        :rtype: str
        """
        return self._voltageunit

    @voltageunit.setter
    def voltageunit(self, voltageunit: str):
        """Sets the voltageunit of this Photovoltaic.


        :param voltageunit: The voltageunit of this Photovoltaic.
        :type voltageunit: str
        """

        self._voltageunit = voltageunit

    @property
    def power(self) -> float:
        """Gets the power of this Photovoltaic.


        :return: The power of this Photovoltaic.
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power: float):
        """Sets the power of this Photovoltaic.


        :param power: The power of this Photovoltaic.
        :type power: float
        """
        if power is None:
            raise ValueError("Invalid value for `power`, must not be `None`")  # noqa: E501

        self._power = power

    @property
    def powerunit(self) -> str:
        """Gets the powerunit of this Photovoltaic.


        :return: The powerunit of this Photovoltaic.
        :rtype: str
        """
        return self._powerunit

    @powerunit.setter
    def powerunit(self, powerunit: str):
        """Sets the powerunit of this Photovoltaic.


        :param powerunit: The powerunit of this Photovoltaic.
        :type powerunit: str
        """

        self._powerunit = powerunit

    @property
    def powerfactor(self) -> float:
        """Gets the powerfactor of this Photovoltaic.


        :return: The powerfactor of this Photovoltaic.
        :rtype: float
        """
        return self._powerfactor

    @powerfactor.setter
    def powerfactor(self, powerfactor: float):
        """Sets the powerfactor of this Photovoltaic.


        :param powerfactor: The powerfactor of this Photovoltaic.
        :type powerfactor: float
        """

        self._powerfactor = powerfactor
