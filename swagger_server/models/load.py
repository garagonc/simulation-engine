# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.power_profile import PowerProfile  # noqa: F401,E501
from swagger_server import util


class Load(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, node: str=None, phases: int=None, voltage: float=None, powerfactor: float=None, power_profile: PowerProfile=None):  # noqa: E501
        """Load - a model defined in Swagger

        :param id: The id of this Load.  # noqa: E501
        :type id: str
        :param node: The node of this Load.  # noqa: E501
        :type node: str
        :param phases: The phases of this Load.  # noqa: E501
        :type phases: int
        :param voltage: The voltage of this Load.  # noqa: E501
        :type voltage: float
        :param powerfactor: The powerfactor of this Load.  # noqa: E501
        :type powerfactor: float
        :param power_profile: The power_profile of this Load.  # noqa: E501
        :type power_profile: PowerProfile
        """
        self.swagger_types = {
            'id': str,
            'node': str,
            'phases': int,
            'voltage': float,
            'powerfactor': float,
            'power_profile': PowerProfile
        }

        self.attribute_map = {
            'id': 'id',
            'node': 'node',
            'phases': 'phases',
            'voltage': 'voltage',
            'powerfactor': 'powerfactor',
            'power_profile': 'power_profile'
        }

        self._id = id
        self._node = node
        self._phases = phases
        self._voltage = voltage
        self._powerfactor = powerfactor
        self._power_profile = power_profile

    @classmethod
    def from_dict(cls, dikt) -> 'Load':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Load of this Load.  # noqa: E501
        :rtype: Load
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Load.


        :return: The id of this Load.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Load.


        :param id: The id of this Load.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def node(self) -> str:
        """Gets the node of this Load.

        ID for the connected node  # noqa: E501

        :return: The node of this Load.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node: str):
        """Sets the node of this Load.

        ID for the connected node  # noqa: E501

        :param node: The node of this Load.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def phases(self) -> int:
        """Gets the phases of this Load.


        :return: The phases of this Load.
        :rtype: int
        """
        return self._phases

    @phases.setter
    def phases(self, phases: int):
        """Sets the phases of this Load.


        :param phases: The phases of this Load.
        :type phases: int
        """

        self._phases = phases

    @property
    def voltage(self) -> float:
        """Gets the voltage of this Load.


        :return: The voltage of this Load.
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage: float):
        """Sets the voltage of this Load.


        :param voltage: The voltage of this Load.
        :type voltage: float
        """

        self._voltage = voltage

    @property
    def powerfactor(self) -> float:
        """Gets the powerfactor of this Load.


        :return: The powerfactor of this Load.
        :rtype: float
        """
        return self._powerfactor

    @powerfactor.setter
    def powerfactor(self, powerfactor: float):
        """Sets the powerfactor of this Load.


        :param powerfactor: The powerfactor of this Load.
        :type powerfactor: float
        """
        if powerfactor is not None and powerfactor > 1:  # noqa: E501
            raise ValueError("Invalid value for `powerfactor`, must be a value less than or equal to `1`")  # noqa: E501

        self._powerfactor = powerfactor

    @property
    def power_profile(self) -> PowerProfile:
        """Gets the power_profile of this Load.


        :return: The power_profile of this Load.
        :rtype: PowerProfile
        """
        return self._power_profile

    @power_profile.setter
    def power_profile(self, power_profile: PowerProfile):
        """Sets the power_profile of this Load.


        :param power_profile: The power_profile of this Load.
        :type power_profile: PowerProfile
        """

        self._power_profile = power_profile
