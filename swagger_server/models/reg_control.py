# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegControl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, transformer_id: str=None, winding_id: str=None, voltage_setting: float=None, bandwidth_volt: float=None, pt_ratio: float=None, ct_primary_rating_amp: float=None, line_drop_compensator_r_volt: float=None, line_drop_compensator_x_volt: float=None):  # noqa: E501
        """RegControl - a model defined in Swagger

        :param id: The id of this RegControl.  # noqa: E501
        :type id: str
        :param transformer_id: The transformer_id of this RegControl.  # noqa: E501
        :type transformer_id: str
        :param winding_id: The winding_id of this RegControl.  # noqa: E501
        :type winding_id: str
        :param voltage_setting: The voltage_setting of this RegControl.  # noqa: E501
        :type voltage_setting: float
        :param bandwidth_volt: The bandwidth_volt of this RegControl.  # noqa: E501
        :type bandwidth_volt: float
        :param pt_ratio: The pt_ratio of this RegControl.  # noqa: E501
        :type pt_ratio: float
        :param ct_primary_rating_amp: The ct_primary_rating_amp of this RegControl.  # noqa: E501
        :type ct_primary_rating_amp: float
        :param line_drop_compensator_r_volt: The line_drop_compensator_r_volt of this RegControl.  # noqa: E501
        :type line_drop_compensator_r_volt: float
        :param line_drop_compensator_x_volt: The line_drop_compensator_x_volt of this RegControl.  # noqa: E501
        :type line_drop_compensator_x_volt: float
        """
        self.swagger_types = {
            'id': str,
            'transformer_id': str,
            'winding_id': str,
            'voltage_setting': float,
            'bandwidth_volt': float,
            'pt_ratio': float,
            'ct_primary_rating_amp': float,
            'line_drop_compensator_r_volt': float,
            'line_drop_compensator_x_volt': float
        }

        self.attribute_map = {
            'id': 'id',
            'transformer_id': 'transformer_id',
            'winding_id': 'winding_id',
            'voltage_setting': 'voltage_setting',
            'bandwidth_volt': 'bandwidth_Volt',
            'pt_ratio': 'PT_Ratio',
            'ct_primary_rating_amp': 'CT_primary_rating_Amp',
            'line_drop_compensator_r_volt': 'line_drop_compensator_R_Volt',
            'line_drop_compensator_x_volt': 'line_drop_compensator_X_Volt'
        }

        self._id = id
        self._transformer_id = transformer_id
        self._winding_id = winding_id
        self._voltage_setting = voltage_setting
        self._bandwidth_volt = bandwidth_volt
        self._pt_ratio = pt_ratio
        self._ct_primary_rating_amp = ct_primary_rating_amp
        self._line_drop_compensator_r_volt = line_drop_compensator_r_volt
        self._line_drop_compensator_x_volt = line_drop_compensator_x_volt

    @classmethod
    def from_dict(cls, dikt) -> 'RegControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegControl of this RegControl.  # noqa: E501
        :rtype: RegControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this RegControl.


        :return: The id of this RegControl.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RegControl.


        :param id: The id of this RegControl.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def transformer_id(self) -> str:
        """Gets the transformer_id of this RegControl.

        ID of the transformer to be connected to  # noqa: E501

        :return: The transformer_id of this RegControl.
        :rtype: str
        """
        return self._transformer_id

    @transformer_id.setter
    def transformer_id(self, transformer_id: str):
        """Sets the transformer_id of this RegControl.

        ID of the transformer to be connected to  # noqa: E501

        :param transformer_id: The transformer_id of this RegControl.
        :type transformer_id: str
        """
        if transformer_id is None:
            raise ValueError("Invalid value for `transformer_id`, must not be `None`")  # noqa: E501

        self._transformer_id = transformer_id

    @property
    def winding_id(self) -> str:
        """Gets the winding_id of this RegControl.


        :return: The winding_id of this RegControl.
        :rtype: str
        """
        return self._winding_id

    @winding_id.setter
    def winding_id(self, winding_id: str):
        """Sets the winding_id of this RegControl.


        :param winding_id: The winding_id of this RegControl.
        :type winding_id: str
        """
        if winding_id is None:
            raise ValueError("Invalid value for `winding_id`, must not be `None`")  # noqa: E501

        self._winding_id = winding_id

    @property
    def voltage_setting(self) -> float:
        """Gets the voltage_setting of this RegControl.


        :return: The voltage_setting of this RegControl.
        :rtype: float
        """
        return self._voltage_setting

    @voltage_setting.setter
    def voltage_setting(self, voltage_setting: float):
        """Sets the voltage_setting of this RegControl.


        :param voltage_setting: The voltage_setting of this RegControl.
        :type voltage_setting: float
        """
        if voltage_setting is None:
            raise ValueError("Invalid value for `voltage_setting`, must not be `None`")  # noqa: E501

        self._voltage_setting = voltage_setting

    @property
    def bandwidth_volt(self) -> float:
        """Gets the bandwidth_volt of this RegControl.


        :return: The bandwidth_volt of this RegControl.
        :rtype: float
        """
        return self._bandwidth_volt

    @bandwidth_volt.setter
    def bandwidth_volt(self, bandwidth_volt: float):
        """Sets the bandwidth_volt of this RegControl.


        :param bandwidth_volt: The bandwidth_volt of this RegControl.
        :type bandwidth_volt: float
        """

        self._bandwidth_volt = bandwidth_volt

    @property
    def pt_ratio(self) -> float:
        """Gets the pt_ratio of this RegControl.


        :return: The pt_ratio of this RegControl.
        :rtype: float
        """
        return self._pt_ratio

    @pt_ratio.setter
    def pt_ratio(self, pt_ratio: float):
        """Sets the pt_ratio of this RegControl.


        :param pt_ratio: The pt_ratio of this RegControl.
        :type pt_ratio: float
        """

        self._pt_ratio = pt_ratio

    @property
    def ct_primary_rating_amp(self) -> float:
        """Gets the ct_primary_rating_amp of this RegControl.


        :return: The ct_primary_rating_amp of this RegControl.
        :rtype: float
        """
        return self._ct_primary_rating_amp

    @ct_primary_rating_amp.setter
    def ct_primary_rating_amp(self, ct_primary_rating_amp: float):
        """Sets the ct_primary_rating_amp of this RegControl.


        :param ct_primary_rating_amp: The ct_primary_rating_amp of this RegControl.
        :type ct_primary_rating_amp: float
        """

        self._ct_primary_rating_amp = ct_primary_rating_amp

    @property
    def line_drop_compensator_r_volt(self) -> float:
        """Gets the line_drop_compensator_r_volt of this RegControl.


        :return: The line_drop_compensator_r_volt of this RegControl.
        :rtype: float
        """
        return self._line_drop_compensator_r_volt

    @line_drop_compensator_r_volt.setter
    def line_drop_compensator_r_volt(self, line_drop_compensator_r_volt: float):
        """Sets the line_drop_compensator_r_volt of this RegControl.


        :param line_drop_compensator_r_volt: The line_drop_compensator_r_volt of this RegControl.
        :type line_drop_compensator_r_volt: float
        """

        self._line_drop_compensator_r_volt = line_drop_compensator_r_volt

    @property
    def line_drop_compensator_x_volt(self) -> float:
        """Gets the line_drop_compensator_x_volt of this RegControl.


        :return: The line_drop_compensator_x_volt of this RegControl.
        :rtype: float
        """
        return self._line_drop_compensator_x_volt

    @line_drop_compensator_x_volt.setter
    def line_drop_compensator_x_volt(self, line_drop_compensator_x_volt: float):
        """Sets the line_drop_compensator_x_volt of this RegControl.


        :param line_drop_compensator_x_volt: The line_drop_compensator_x_volt of this RegControl.
        :type line_drop_compensator_x_volt: float
        """

        self._line_drop_compensator_x_volt = line_drop_compensator_x_volt
