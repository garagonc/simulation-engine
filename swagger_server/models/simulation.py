# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.duration import Duration  # noqa: F401,E501
from swagger_server import util


class Simulation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, grid_id: str=None, duration: Duration=None, threshold_low: float=None, threshold_medium: float=None, threshold_high: float=None):  # noqa: E501
        """Simulation - a model defined in Swagger

        :param grid_id: The grid_id of this Simulation.  # noqa: E501
        :type grid_id: str
        :param duration: The duration of this Simulation.  # noqa: E501
        :type duration: Duration
        :param threshold_low: The threshold_low of this Simulation.  # noqa: E501
        :type threshold_low: float
        :param threshold_medium: The threshold_medium of this Simulation.  # noqa: E501
        :type threshold_medium: float
        :param threshold_high: The threshold_high of this Simulation.  # noqa: E501
        :type threshold_high: float
        """
        self.swagger_types = {
            'grid_id': str,
            'duration': Duration,
            'threshold_low': float,
            'threshold_medium': float,
            'threshold_high': float
        }

        self.attribute_map = {
            'grid_id': 'gridId',
            'duration': 'duration',
            'threshold_low': 'thresholdLow',
            'threshold_medium': 'thresholdMedium',
            'threshold_high': 'thresholdHigh'
        }

        self._grid_id = grid_id
        self._duration = duration
        self._threshold_low = threshold_low
        self._threshold_medium = threshold_medium
        self._threshold_high = threshold_high

    @classmethod
    def from_dict(cls, dikt) -> 'Simulation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Simulation of this Simulation.  # noqa: E501
        :rtype: Simulation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grid_id(self) -> str:
        """Gets the grid_id of this Simulation.


        :return: The grid_id of this Simulation.
        :rtype: str
        """
        return self._grid_id

    @grid_id.setter
    def grid_id(self, grid_id: str):
        """Sets the grid_id of this Simulation.


        :param grid_id: The grid_id of this Simulation.
        :type grid_id: str
        """

        self._grid_id = grid_id

    @property
    def duration(self) -> Duration:
        """Gets the duration of this Simulation.


        :return: The duration of this Simulation.
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration: Duration):
        """Sets the duration of this Simulation.


        :param duration: The duration of this Simulation.
        :type duration: Duration
        """

        self._duration = duration

    @property
    def threshold_low(self) -> float:
        """Gets the threshold_low of this Simulation.

        Lower threshold in % for voltage error  # noqa: E501

        :return: The threshold_low of this Simulation.
        :rtype: float
        """
        return self._threshold_low

    @threshold_low.setter
    def threshold_low(self, threshold_low: float):
        """Sets the threshold_low of this Simulation.

        Lower threshold in % for voltage error  # noqa: E501

        :param threshold_low: The threshold_low of this Simulation.
        :type threshold_low: float
        """

        self._threshold_low = threshold_low

    @property
    def threshold_medium(self) -> float:
        """Gets the threshold_medium of this Simulation.

        Medium threshold in % for voltage error  # noqa: E501

        :return: The threshold_medium of this Simulation.
        :rtype: float
        """
        return self._threshold_medium

    @threshold_medium.setter
    def threshold_medium(self, threshold_medium: float):
        """Sets the threshold_medium of this Simulation.

        Medium threshold in % for voltage error  # noqa: E501

        :param threshold_medium: The threshold_medium of this Simulation.
        :type threshold_medium: float
        """

        self._threshold_medium = threshold_medium

    @property
    def threshold_high(self) -> float:
        """Gets the threshold_high of this Simulation.

        Maximum threshold in % for voltage error  # noqa: E501

        :return: The threshold_high of this Simulation.
        :rtype: float
        """
        return self._threshold_high

    @threshold_high.setter
    def threshold_high(self, threshold_high: float):
        """Sets the threshold_high of this Simulation.

        Maximum threshold in % for voltage error  # noqa: E501

        :param threshold_high: The threshold_high of this Simulation.
        :type threshold_high: float
        """

        self._threshold_high = threshold_high
