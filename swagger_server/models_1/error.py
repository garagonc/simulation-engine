# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.voltage import Voltage  # noqa: F401,E501
from swagger_server import util


class Error(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, threshold_high: Voltage=None, threshold_medium: Voltage=None, threshold_low: Voltage=None):  # noqa: E501
        """Error - a model defined in Swagger

        :param threshold_high: The threshold_high of this Error.  # noqa: E501
        :type threshold_high: Voltage
        :param threshold_medium: The threshold_medium of this Error.  # noqa: E501
        :type threshold_medium: Voltage
        :param threshold_low: The threshold_low of this Error.  # noqa: E501
        :type threshold_low: Voltage
        """
        self.swagger_types = {
            'threshold_high': Voltage,
            'threshold_medium': Voltage,
            'threshold_low': Voltage
        }

        self.attribute_map = {
            'threshold_high': 'thresholdHigh',
            'threshold_medium': 'thresholdMedium',
            'threshold_low': 'thresholdLow'
        }

        self._threshold_high = threshold_high
        self._threshold_medium = threshold_medium
        self._threshold_low = threshold_low

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def threshold_high(self) -> Voltage:
        """Gets the threshold_high of this Error.


        :return: The threshold_high of this Error.
        :rtype: Voltage
        """
        return self._threshold_high

    @threshold_high.setter
    def threshold_high(self, threshold_high: Voltage):
        """Sets the threshold_high of this Error.


        :param threshold_high: The threshold_high of this Error.
        :type threshold_high: Voltage
        """

        self._threshold_high = threshold_high

    @property
    def threshold_medium(self) -> Voltage:
        """Gets the threshold_medium of this Error.


        :return: The threshold_medium of this Error.
        :rtype: Voltage
        """
        return self._threshold_medium

    @threshold_medium.setter
    def threshold_medium(self, threshold_medium: Voltage):
        """Sets the threshold_medium of this Error.


        :param threshold_medium: The threshold_medium of this Error.
        :type threshold_medium: Voltage
        """

        self._threshold_medium = threshold_medium

    @property
    def threshold_low(self) -> Voltage:
        """Gets the threshold_low of this Error.


        :return: The threshold_low of this Error.
        :rtype: Voltage
        """
        return self._threshold_low

    @threshold_low.setter
    def threshold_low(self, threshold_low: Voltage):
        """Sets the threshold_low of this Error.


        :param threshold_low: The threshold_low of this Error.
        :type threshold_low: Voltage
        """

        self._threshold_low = threshold_low
